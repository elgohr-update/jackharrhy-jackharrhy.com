(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
document.addEventListener("DOMContentLoaded", function (event) {
	var eyeCatcher = document.getElementById('eyeCatcher');
	var canvas = document.getElementById('canvas');

	var scene = new THREE.Scene();
	var camera = new THREE.PerspectiveCamera(40, eyeCatcher.offsetWidth / eyeCatcher.offsetHeight, 0.1, 1000);

	var renderer = new THREE.WebGLRenderer({ antialias: true });
	renderer.setPixelRatio(window.devicePixelRatio);
	renderer.setSize(eyeCatcher.offsetWidth, eyeCatcher.offsetHeight);
	renderer.setClearColor(0x001024, 1);
	eyeCatcher.appendChild(renderer.domElement);

	window.addEventListener('resize', onWindowResize, false);

	function onWindowResize() {
		camera.aspect = eyeCatcher.offsetWidth / eyeCatcher.offsetHeight;
		camera.updateProjectionMatrix();

		moveBackNum = eyeCatcher.offsetWidth / 175;

		renderer.setSize(eyeCatcher.offsetWidth, eyeCatcher.offsetHeight);
	}

	var cubes = [];

	var moveBackNum = eyeCatcher.offsetWidth / 175;
	var amountOfCubes = 65;

	for (var i = 0; i < amountOfCubes; i++) {
		cubes[i] = {
			geo: new THREE.BoxGeometry(0.1, 1, 1),
			mat: new THREE.MeshPhongMaterial({ color: 0xb1c7d6 })
		};
		cubes[i].mesh = new THREE.Mesh(cubes[i].geo, cubes[i].mat);
		scene.add(cubes[i].mesh);

		cubes[i].mesh.position.x = moveBackNum;
		cubes[i].mesh.position.z = -3;
	}

	var dirLight = new THREE.DirectionalLight(0xffffff, 1);
	dirLight.color.setHSL(0.1, 1, 0.95);
	dirLight.position.set(-1, 1.75, 1);
	dirLight.position.multiplyScalar(50);
	dirLight.castShadow = true;
	scene.add(dirLight);

	var light = new THREE.AmbientLight(0xe3e3e3);
	light.position.y = 5;
	scene.add(light);

	var frame = -1;
	var render = function () {
		frame++;

		for (var i = 0; i < amountOfCubes; i++) {
			if (i * 25 < frame) {
				var cube = cubes[i];

				cube.mesh.position.x += 0.01;

				if (cube.mesh.position.x > moveBackNum) {
					cube.mesh.position.x *= -1;
				}
				cube.mesh.position.z += Math.sin(frame / 50 + i) / 250;
			}
		}

		renderer.render(scene, camera);

		requestAnimationFrame(render);
	};
	render();
});

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXGpzXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLFNBQVMsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFVBQVMsS0FBVCxFQUFnQjtBQUM3RCxLQUFJLGFBQWEsU0FBUyxjQUFULENBQXdCLFlBQXhCLENBQWpCO0FBQ0EsS0FBSSxTQUFTLFNBQVMsY0FBVCxDQUF3QixRQUF4QixDQUFiOztBQUVBLEtBQUksUUFBUSxJQUFJLE1BQU0sS0FBVixFQUFaO0FBQ0EsS0FBSSxTQUFTLElBQUksTUFBTSxpQkFBVixDQUE0QixFQUE1QixFQUFnQyxXQUFXLFdBQVgsR0FBdUIsV0FBVyxZQUFsRSxFQUFnRixHQUFoRixFQUFxRixJQUFyRixDQUFiOztBQUVBLEtBQUksV0FBVyxJQUFJLE1BQU0sYUFBVixDQUF3QixFQUFFLFdBQVcsSUFBYixFQUF4QixDQUFmO0FBQ0EsVUFBUyxhQUFULENBQXVCLE9BQU8sZ0JBQTlCO0FBQ0EsVUFBUyxPQUFULENBQWlCLFdBQVcsV0FBNUIsRUFBeUMsV0FBVyxZQUFwRDtBQUNBLFVBQVMsYUFBVCxDQUF1QixRQUF2QixFQUFpQyxDQUFqQztBQUNBLFlBQVcsV0FBWCxDQUF1QixTQUFTLFVBQWhDOztBQUVBLFFBQU8sZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsY0FBbEMsRUFBa0QsS0FBbEQ7O0FBRUEsVUFBUyxjQUFULEdBQXlCO0FBQ3RCLFNBQU8sTUFBUCxHQUFnQixXQUFXLFdBQVgsR0FBdUIsV0FBVyxZQUFsRDtBQUNBLFNBQU8sc0JBQVA7O0FBRUYsZ0JBQWMsV0FBVyxXQUFYLEdBQXlCLEdBQXZDOztBQUVFLFdBQVMsT0FBVCxDQUFpQixXQUFXLFdBQTVCLEVBQXlDLFdBQVcsWUFBcEQ7QUFDRjs7QUFFRCxLQUFJLFFBQVEsRUFBWjs7QUFFQSxLQUFJLGNBQWMsV0FBVyxXQUFYLEdBQXlCLEdBQTNDO0FBQ0EsS0FBSSxnQkFBZ0IsRUFBcEI7O0FBRUEsTUFBSSxJQUFJLElBQUUsQ0FBVixFQUFhLElBQUUsYUFBZixFQUE4QixHQUE5QixFQUFtQztBQUNsQyxRQUFNLENBQU4sSUFBVztBQUNWLFFBQUssSUFBSSxNQUFNLFdBQVYsQ0FBc0IsR0FBdEIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FESztBQUVWLFFBQUssSUFBSSxNQUFNLGlCQUFWLENBQTRCLEVBQUUsT0FBTyxRQUFULEVBQTVCO0FBRkssR0FBWDtBQUlBLFFBQU0sQ0FBTixFQUFTLElBQVQsR0FBZ0IsSUFBSSxNQUFNLElBQVYsQ0FBZSxNQUFNLENBQU4sRUFBUyxHQUF4QixFQUE2QixNQUFNLENBQU4sRUFBUyxHQUF0QyxDQUFoQjtBQUNBLFFBQU0sR0FBTixDQUFVLE1BQU0sQ0FBTixFQUFTLElBQW5COztBQUVBLFFBQU0sQ0FBTixFQUFTLElBQVQsQ0FBYyxRQUFkLENBQXVCLENBQXZCLEdBQTJCLFdBQTNCO0FBQ0EsUUFBTSxDQUFOLEVBQVMsSUFBVCxDQUFjLFFBQWQsQ0FBdUIsQ0FBdkIsR0FBMkIsQ0FBQyxDQUE1QjtBQUNBOztBQUVELEtBQUksV0FBVyxJQUFJLE1BQU0sZ0JBQVYsQ0FBMkIsUUFBM0IsRUFBcUMsQ0FBckMsQ0FBZjtBQUNBLFVBQVMsS0FBVCxDQUFlLE1BQWYsQ0FBc0IsR0FBdEIsRUFBMkIsQ0FBM0IsRUFBOEIsSUFBOUI7QUFDQSxVQUFTLFFBQVQsQ0FBa0IsR0FBbEIsQ0FBc0IsQ0FBQyxDQUF2QixFQUEwQixJQUExQixFQUFnQyxDQUFoQztBQUNBLFVBQVMsUUFBVCxDQUFrQixjQUFsQixDQUFpQyxFQUFqQztBQUNBLFVBQVMsVUFBVCxHQUFzQixJQUF0QjtBQUNBLE9BQU0sR0FBTixDQUFVLFFBQVY7O0FBRUEsS0FBSSxRQUFRLElBQUksTUFBTSxZQUFWLENBQXVCLFFBQXZCLENBQVo7QUFDQSxPQUFNLFFBQU4sQ0FBZSxDQUFmLEdBQW1CLENBQW5CO0FBQ0EsT0FBTSxHQUFOLENBQVUsS0FBVjs7QUFFQSxLQUFJLFFBQVEsQ0FBQyxDQUFiO0FBQ0EsS0FBSSxTQUFTLFlBQVk7QUFDeEI7O0FBRUEsT0FBSSxJQUFJLElBQUUsQ0FBVixFQUFhLElBQUUsYUFBZixFQUE4QixHQUE5QixFQUFtQztBQUNsQyxPQUFJLElBQUksRUFBTCxHQUFXLEtBQWQsRUFBcUI7QUFDcEIsUUFBSSxPQUFPLE1BQU0sQ0FBTixDQUFYOztBQUVBLFNBQUssSUFBTCxDQUFVLFFBQVYsQ0FBbUIsQ0FBbkIsSUFBd0IsSUFBeEI7O0FBRUEsUUFBRyxLQUFLLElBQUwsQ0FBVSxRQUFWLENBQW1CLENBQW5CLEdBQXVCLFdBQTFCLEVBQXVDO0FBQ3RDLFVBQUssSUFBTCxDQUFVLFFBQVYsQ0FBbUIsQ0FBbkIsSUFBd0IsQ0FBQyxDQUF6QjtBQUNBO0FBQ0QsU0FBSyxJQUFMLENBQVUsUUFBVixDQUFtQixDQUFuQixJQUF3QixLQUFLLEdBQUwsQ0FBUyxRQUFNLEVBQU4sR0FBVyxDQUFwQixJQUF1QixHQUEvQztBQUNBO0FBQ0Q7O0FBRUQsV0FBUyxNQUFULENBQWdCLEtBQWhCLEVBQXVCLE1BQXZCOztBQUVBLHdCQUFzQixNQUF0QjtBQUNBLEVBbkJEO0FBb0JBO0FBQ0EsQ0ExRUQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHR2YXIgZXllQ2F0Y2hlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleWVDYXRjaGVyJyk7XHJcblx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcclxuXHJcblx0dmFyIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcblx0dmFyIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0MCwgZXllQ2F0Y2hlci5vZmZzZXRXaWR0aC9leWVDYXRjaGVyLm9mZnNldEhlaWdodCwgMC4xLCAxMDAwKTtcclxuXHJcblx0dmFyIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XHJcblx0cmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcblx0cmVuZGVyZXIuc2V0U2l6ZShleWVDYXRjaGVyLm9mZnNldFdpZHRoLCBleWVDYXRjaGVyLm9mZnNldEhlaWdodCk7XHJcblx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMTAyNCwgMSk7XHJcblx0ZXllQ2F0Y2hlci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplLCBmYWxzZSApO1xyXG5cclxuXHRmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpe1xyXG4gICAgY2FtZXJhLmFzcGVjdCA9IGV5ZUNhdGNoZXIub2Zmc2V0V2lkdGgvZXllQ2F0Y2hlci5vZmZzZXRIZWlnaHQ7XHJcbiAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHRcdG1vdmVCYWNrTnVtID0gZXllQ2F0Y2hlci5vZmZzZXRXaWR0aCAvIDE3NTtcclxuXHJcbiAgICByZW5kZXJlci5zZXRTaXplKGV5ZUNhdGNoZXIub2Zmc2V0V2lkdGgsIGV5ZUNhdGNoZXIub2Zmc2V0SGVpZ2h0KTtcclxuXHR9XHJcblxyXG5cdHZhciBjdWJlcyA9IFtdO1xyXG5cclxuXHR2YXIgbW92ZUJhY2tOdW0gPSBleWVDYXRjaGVyLm9mZnNldFdpZHRoIC8gMTc1O1xyXG5cdHZhciBhbW91bnRPZkN1YmVzID0gNjU7XHJcblxyXG5cdGZvcih2YXIgaT0wOyBpPGFtb3VudE9mQ3ViZXM7IGkrKykge1xyXG5cdFx0Y3ViZXNbaV0gPSB7XHJcblx0XHRcdGdlbzogbmV3IFRIUkVFLkJveEdlb21ldHJ5KDAuMSwgMSwgMSksXHJcblx0XHRcdG1hdDogbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgY29sb3I6IDB4YjFjN2Q2IH0pXHJcblx0XHR9O1xyXG5cdFx0Y3ViZXNbaV0ubWVzaCA9IG5ldyBUSFJFRS5NZXNoKGN1YmVzW2ldLmdlbywgY3ViZXNbaV0ubWF0KTtcclxuXHRcdHNjZW5lLmFkZChjdWJlc1tpXS5tZXNoKTtcclxuXHJcblx0XHRjdWJlc1tpXS5tZXNoLnBvc2l0aW9uLnggPSBtb3ZlQmFja051bTtcclxuXHRcdGN1YmVzW2ldLm1lc2gucG9zaXRpb24ueiA9IC0zO1xyXG5cdH1cclxuXHJcblx0dmFyIGRpckxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDEpO1xyXG5cdGRpckxpZ2h0LmNvbG9yLnNldEhTTCgwLjEsIDEsIDAuOTUpO1xyXG5cdGRpckxpZ2h0LnBvc2l0aW9uLnNldCgtMSwgMS43NSwgMSk7XHJcblx0ZGlyTGlnaHQucG9zaXRpb24ubXVsdGlwbHlTY2FsYXIoNTApO1xyXG5cdGRpckxpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xyXG5cdHNjZW5lLmFkZChkaXJMaWdodCk7XHJcblxyXG5cdHZhciBsaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhlM2UzZTMpO1xyXG5cdGxpZ2h0LnBvc2l0aW9uLnkgPSA1O1xyXG5cdHNjZW5lLmFkZChsaWdodCk7XHJcblxyXG5cdHZhciBmcmFtZSA9IC0xO1xyXG5cdHZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRmcmFtZSsrO1xyXG5cclxuXHRcdGZvcih2YXIgaT0wOyBpPGFtb3VudE9mQ3ViZXM7IGkrKykge1xyXG5cdFx0XHRpZigoaSAqIDI1KSA8IGZyYW1lKSB7XHJcblx0XHRcdFx0dmFyIGN1YmUgPSBjdWJlc1tpXTtcclxuXHJcblx0XHRcdFx0Y3ViZS5tZXNoLnBvc2l0aW9uLnggKz0gMC4wMTtcclxuXHJcblx0XHRcdFx0aWYoY3ViZS5tZXNoLnBvc2l0aW9uLnggPiBtb3ZlQmFja051bSkge1xyXG5cdFx0XHRcdFx0Y3ViZS5tZXNoLnBvc2l0aW9uLnggKj0gLTE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGN1YmUubWVzaC5wb3NpdGlvbi56ICs9IE1hdGguc2luKGZyYW1lLzUwICsgaSkvMjUwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xyXG5cclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xyXG5cdH07XHJcblx0cmVuZGVyKCk7XHJcbn0pO1xyXG4iXX0=